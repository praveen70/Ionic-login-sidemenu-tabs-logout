import { Injectable, Inject, Optional, NgZone, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { Observable, empty, from, of, throwError } from 'rxjs';
import { mergeMap, catchError, map, switchMap, concat, defaultIfEmpty } from 'rxjs/operators';
import { runOutsideAngular } from '@angular/fire';
import { FirebaseOptionsToken, FirebaseNameOrConfigToken, _firebaseAppFactory } from '@angular/fire';
var AngularFireMessaging = (function () {
    function AngularFireMessaging(options, nameOrConfig, platformId, zone) {
        var _this = this;
        if (isPlatformBrowser(platformId)) {
            var requireMessaging = from(import('firebase/messaging'));
            this.messaging = requireMessaging.pipe(map(function () { return _firebaseAppFactory(options, nameOrConfig); }), map(function (app) { return app.messaging(); }), runOutsideAngular(zone));
            this.requestPermission = this.messaging.pipe(switchMap(function (messaging) { return messaging.requestPermission(); }), runOutsideAngular(zone));
        }
        else {
            this.messaging = empty();
            this.requestPermission = throwError('Not available on server platform.');
        }
        this.getToken = this.messaging.pipe(switchMap(function (messaging) { return messaging.getToken(); }), defaultIfEmpty(null), runOutsideAngular(zone));
        var tokenChanges = this.messaging.pipe(switchMap(function (messaging) { return new Observable(messaging.onTokenRefresh.bind(messaging)).pipe(switchMap(function () { return messaging.getToken(); })); }), runOutsideAngular(zone));
        this.tokenChanges = this.getToken.pipe(concat(tokenChanges));
        this.messages = this.messaging.pipe(switchMap(function (messaging) { return new Observable(messaging.onMessage.bind(messaging)); }), runOutsideAngular(zone));
        this.requestToken = this.requestPermission.pipe(catchError(function () { return of(null); }), mergeMap(function () { return _this.tokenChanges; }));
        this.deleteToken = function (token) { return _this.messaging.pipe(switchMap(function (messaging) { return messaging.deleteToken(token); }), defaultIfEmpty(false), runOutsideAngular(zone)); };
    }
    AngularFireMessaging.decorators = [
        { type: Injectable },
    ];
    AngularFireMessaging.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [FirebaseOptionsToken,] }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [FirebaseNameOrConfigToken,] }] },
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: NgZone }
    ]; };
    return AngularFireMessaging;
}());
export { AngularFireMessaging };
//# sourceMappingURL=messaging.js.map