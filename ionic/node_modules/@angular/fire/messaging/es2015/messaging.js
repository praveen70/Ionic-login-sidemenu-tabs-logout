import { Injectable, Inject, Optional, NgZone, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { Observable, empty, from, of, throwError } from 'rxjs';
import { mergeMap, catchError, map, switchMap, concat, defaultIfEmpty } from 'rxjs/operators';
import { runOutsideAngular } from '@angular/fire';
import { FirebaseOptionsToken, FirebaseNameOrConfigToken, _firebaseAppFactory } from '@angular/fire';
export class AngularFireMessaging {
    constructor(options, nameOrConfig, platformId, zone) {
        if (isPlatformBrowser(platformId)) {
            const requireMessaging = from(import('firebase/messaging'));
            this.messaging = requireMessaging.pipe(map(() => _firebaseAppFactory(options, nameOrConfig)), map(app => app.messaging()), runOutsideAngular(zone));
            this.requestPermission = this.messaging.pipe(switchMap(messaging => messaging.requestPermission()), runOutsideAngular(zone));
        }
        else {
            this.messaging = empty();
            this.requestPermission = throwError('Not available on server platform.');
        }
        this.getToken = this.messaging.pipe(switchMap(messaging => messaging.getToken()), defaultIfEmpty(null), runOutsideAngular(zone));
        const tokenChanges = this.messaging.pipe(switchMap(messaging => new Observable(messaging.onTokenRefresh.bind(messaging)).pipe(switchMap(() => messaging.getToken()))), runOutsideAngular(zone));
        this.tokenChanges = this.getToken.pipe(concat(tokenChanges));
        this.messages = this.messaging.pipe(switchMap(messaging => new Observable(messaging.onMessage.bind(messaging))), runOutsideAngular(zone));
        this.requestToken = this.requestPermission.pipe(catchError(() => of(null)), mergeMap(() => this.tokenChanges));
        this.deleteToken = (token) => this.messaging.pipe(switchMap(messaging => messaging.deleteToken(token)), defaultIfEmpty(false), runOutsideAngular(zone));
    }
}
AngularFireMessaging.decorators = [
    { type: Injectable },
];
AngularFireMessaging.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [FirebaseOptionsToken,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [FirebaseNameOrConfigToken,] }] },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: NgZone }
];
//# sourceMappingURL=messaging.js.map